import { getHttpEndpoint } from "@orbs-network/ton-access";
import { mnemonicToWalletKey } from "ton-crypto";
import { TonClient, Cell, WalletContractV3R2 } from "ton";
import NFTCollection from "./nftCollection"; // this is the interface class from step 7

async function deploy() {
  // initialize ton rpc client on testnet
  const endpoint = await getHttpEndpoint({ network: "testnet" });
  const client = new TonClient({ endpoint });

  // open wallet v4 (notice the correct wallet version here)
  const mnemonic =
    "recipe size finger fiction open scrap stable lava afraid knock sibling sting visual fuel knife catalog hidden much bid adult maid palm nurse ocean"; // your 24 secret words (replace ... with the rest of the words)
  const key = await mnemonicToWalletKey(mnemonic.split(" "));
  const wallet = WalletContractV3R2.create({
    publicKey: key.publicKey,
    workchain: 0,
  });

  // print wallet address
  console.log(`Wallet address: ${wallet.address.toString({ testOnly: true })}`);

  // prepare Counter's initial code and data cells for deployment
  let royalty = 0.05;
  let royaltyAddress = wallet.address;
  let collectionContentUri =
    "https://raw.githubusercontent.com/ton-blockchain/token-contract/main/nft/web-example/my_collection.json";
  let nftItemContentBaseUri =
    "https://raw.githubusercontent.com/ton-blockchain/token-contract/main/nft/web-example/";
  let collectionCode = Cell.fromBoc(
    Buffer.from(


      "hex"
    )
  );
  let itemCode = Cell.fromBoc(
    Buffer.from(


      "hex"
    )
  );

  const nftCollection = NFTCollection.createForDeploy(
    collectionCode[0],
    wallet.address,
    collectionContentUri,
    nftItemContentBaseUri,
    itemCode[0],
    royalty,
    royaltyAddress
  );

  // exit if contract is already deployed
  console.log("contract address:", nftCollection.address.toString());
  if (await client.isContractDeployed(nftCollection.address)) {
    return console.log("already deployed");
  }

  // open wallet and read the current seqno of the wallet
  const walletContract = client.open(wallet);
  const walletSender = walletContract.sender(key.secretKey);
  const seqno = await walletContract.getSeqno();

  // send the deploy transaction
  const counterContract = client.open(nftCollection);
  await counterContract.sendDeploy(walletSender);

  // wait until confirmed
  let currentSeqno = seqno;
  while (currentSeqno == seqno) {
    console.log("waiting for deploy transaction to confirm...");
    await sleep(1500);
    currentSeqno = await walletContract.getSeqno();
  }
  console.log("deploy transaction confirmed!");
}

//deploy();

function sleep(ms: number) {
  return new Promise((resolve) => setTimeout(resolve, ms));
}
